#[derive(Debug)]
pub struct Ram([u8; 4096]);

impl Ram {
    pub fn new() -> Ram {
        let mut ram = Ram([0; 4096]);
        let sprites_standard = [
            [0xF0, 0x90, 0x90, 0x90, 0xF0], //0
            [0x20, 0x60, 0x20, 0x20, 0x70], //1
            [0xF0, 0x10, 0xF0, 0x80, 0xF0], //2
            [0xF0, 0x10, 0xF0, 0x10, 0xF0], //3
            [0x90, 0x90, 0xF0, 0x10, 0x10], //4
            [0xF0, 0x80, 0xF0, 0x10, 0xF0], //5
            [0xF0, 0x80, 0xF0, 0x90, 0xF0], //6
            [0xF0, 0x10, 0x20, 0x40, 0x40], //7
            [0xF0, 0x90, 0xF0, 0x90, 0xF0], //8
            [0xF0, 0x90, 0xF0, 0x10, 0xF0], //9
            [0xF0, 0x90, 0xF0, 0x90, 0x90], //A
            [0xE0, 0x90, 0xE0, 0x90, 0xE0], //B
            [0xF0, 0x80, 0x80, 0x80, 0xF0], //C
            [0xE0, 0x90, 0x90, 0x90, 0xE0], //D
            [0xF0, 0x80, 0xF0, 0x80, 0xF0], //E
            [0xF0, 0x80, 0xF0, 0x80, 0x80], //F
        ];
        for (i, num) in sprites_standard.iter().enumerate() {
            for (j, value) in num.iter().enumerate() {
                ram.write_byte(i * 5 + j, *value);
            }
        }
        ram
    }
    pub fn write_byte(&mut self, address: usize, value: u8) {
        self.0[address] = value;
    }

    pub fn read_byte(&self, address: usize) -> u8 {
        self.0[address]
    }
}

impl Default for Ram {
    fn default() -> Self {
        Self::new()
    }
}
